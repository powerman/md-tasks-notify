name: 'Release PLZ PR'
description: 'Create or update release-plz pull request based on conventional commits'
inputs:
  version_cmd:
    description: 'Optional shell command to update additional files with version (receives version in $RELEASE_PLZ_VERSION)'
    required: false
  target_branch:
    description: 'Target branch for release PRs'
    required: false
  pr_branch:
    description: 'Branch name for release PRs'
    required: false
  commit_prefix:
    description: 'Commit message prefix for releases'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Show release-plz configuration
      shell: bash
      env:
        RELEASE_PLZ_TARGET_BRANCH: ${{ inputs.target_branch }}
        RELEASE_PLZ_PR_BRANCH: ${{ inputs.pr_branch }}
        RELEASE_PLZ_COMMIT_PREFIX: ${{ inputs.commit_prefix }}
      run: |
        ${{ github.action_path }}/../scripts/setup-config.sh

    - name: Ensure full git history
      shell: bash
      run: |
        # Need full git history for git-cliff to determine next version and build changelog.
        echo "Ensuring full git history..."
        git fetch --unshallow || true

    - uses: jdx/mise-action@v2
      env:
        GITHUB_TOKEN: ${{ github.token }} # Increase GitHub API rate limits.

    - uses: fregante/setup-git-user@v2

    - name: Determine version and generate changelog
      shell: bash
      env:
        GITHUB_REPO: ${{ github.repository }} # Used by git-cliff.
        GITHUB_TOKEN: ${{ github.token }} # Used by gh.
      run: |
        VERSION=$(git-cliff --bumped-version)

        # Check if existing PR has a manually set version that should be preserved.
        pr_title=$(gh pr list --state open --head "$PR_BRANCH" --json title --jq '.[0].title')
        if [ -n "$pr_title" ]; then
          pr_version=$(echo "$pr_title" | grep -oP "^\Q${COMMIT_PREFIX}\E\s+\Kv?[0-9]+\.[0-9]+\.[0-9]+(?:-[0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*)?(?:\+[0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*)?(?=\s*$)")
          test -n "$pr_version" || { echo "Failed to extract version from PR title: '$pr_title'"; exit 1; }
          alias semver-ge="python3 -c 'import sys, packaging.version as v; exit(v.Version(sys.argv[1]) < v.Version(sys.argv[2]))'"
          if semver-ge "${pr_version}" "${VERSION}"; then
            VERSION="v${pr_version#v}"
          fi
        fi

        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "COMMIT_MSG=$COMMIT_PREFIX $VERSION" >> $GITHUB_ENV
        echo "CHANGELOG<<EOF" >> $GITHUB_ENV
        git-cliff --tag "$VERSION" --unreleased --strip all | tail -n +3 >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Create or update release-plz branch with CHANGELOG.md
      shell: bash
      env:
        GITHUB_REPO: ${{ github.repository }} # Used by git-cliff.
      run: |
        # Save workdir state
        ${{ github.action_path }}/../scripts/save-workdir.sh "release-plz-pr-stash"

        git checkout -B "$PR_BRANCH"

        # Run custom version command if provided
        if [ -n "${{ inputs.version_cmd }}" ]; then
          echo "Running custom version command..."
          export RELEASE_PLZ_VERSION="$VERSION"
          bash -c -e -o pipefail "${{ inputs.version_cmd }}"
        fi

        git-cliff --tag "$VERSION" -o CHANGELOG.md
        git add CHANGELOG.md

        git commit --allow-empty -m "$COMMIT_MSG"
        git push origin "$PR_BRANCH" --force

        # Restore workdir state
        ${{ github.action_path }}/../scripts/restore-workdir.sh

    - name: Create or update release-plz pull request
      shell: bash
      env:
        GITHUB_TOKEN: ${{ github.token }} # Used by gh.
      run: |
        pr_number=$(gh pr list --state open --head "$PR_BRANCH" --json number --jq '.[0].number')
        if [ -z "$pr_number" ]; then
          gh pr create --head "$PR_BRANCH" --base "$TARGET_BRANCH" --title "$COMMIT_MSG" --body "$CHANGELOG"
          echo "Created new release-plz PR"
        else
          gh pr edit "$pr_number" --title "$COMMIT_MSG" --body "$CHANGELOG"
          echo "Updated existing release-plz PR #$pr_number"
        fi
