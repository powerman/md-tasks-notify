# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[bump]
# do not bump major for 0.x.y versions
breaking_always_bump_major = false
# use "v" prefix
initial_tag = "v0.1.0"

[changelog]
# template for the changelog header
header = """
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.1.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{%- macro remote_diff_url(from, to) -%}
    https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}/compare/{{ from }}..{{ to }}
{%- endmacro -%}
{%- macro remote_pr_url(id) -%}
    https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}/pull/{{ id }}
{%- endmacro -%}
{%- macro remote_commit_url(id) -%}
    https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}/commit/{{ id }}
{%- endmacro -%}
{%- macro commit(commit) -%}
{% if commit.scope %}*({{ commit.scope }})* {% endif %}\
    {% if commit.breaking %}**BREAKING!** {% endif %}\
    {{ commit.message | split(pat="\n") | first | upper_first | trim }} by \
    {% if commit.remote.username %}@{{ commit.remote.username }}
    {%- else %}{{ commit.author.name }}
    {%- endif %} in \
    {% if commit.remote.pr_number -%}
        [#{{ commit.remote.pr_number }}]
    {%- else -%}
        [{{ commit.id | truncate(length=7, end="") }}]
    {%- endif %}
{%- endmacro -%}

{%- if version %}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}
    ## [Unreleased]
{% endif -%}

{%- for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim }}

    {% for commit in commits | filter(attribute="scope") | sort(attribute="scope") -%}
        - {{ self::commit(commit=commit) }}
    {% endfor -%}
    {% for commit in commits -%}
        {%- if not commit.scope -%}
            - {{ self::commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{%- endfor -%}

{%- if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
    ### New Contributors

    {% for contributor in github.contributors | filter(attribute="is_first_time", value=true) -%}
        - @{{ contributor.username }} made their first contribution
            {%- if contributor.pr_number %} in \
                [#{{ contributor.pr_number }}]({{ self::remote_pr_url(id=contributor.pr_number) }})
            {%- endif %}
    {% endfor -%}
{%- endif -%}

{% if version %}
    [{{ version | trim_start_matches(pat="v") }}]: \
    {% if previous.version -%}
        {{ self::remote_diff_url(from=previous.version, to=version) }}
    {%- else -%}
        {{ self::remote_diff_url(from="%40%7B10year%7D", to=version) }}
    {%- endif %}
{% else %}
    [Unreleased]: \
    {% if previous.version -%}
        {{ self::remote_diff_url(from=previous.version, to="HEAD") }}
    {%- else -%}
        {{ self::remote_diff_url(from="%40%7B10year%7D", to="HEAD") }}
    {%- endif %}
{% endif -%}
{% for commit in commits -%}
    {% if commit.remote.pr_number -%}
        [#{{ commit.remote.pr_number }}]: {{ self::remote_pr_url(id=commit.remote.pr_number) }}
    {%- else -%}
        [{{ commit.id | truncate(length=7, end="") }}]: {{ self::remote_commit_url(id=commit.id) }}
    {%- endif %}
{% endfor -%}
"""
# template for the changelog footer
footer = """

<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true
# postprocessors
postprocessors = [
  # { pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" }, # replace repository URL
]
# render body even when there are no releases to process
# render_always = true
# output file path
# output = "CHANGELOG.md"

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# do not filter out the commits that are not conventional
filter_unconventional = false
# do not process each line of a commit as an individual commit
split_commits = false
# any breaking changes is protected against being skipped due to any commit parser
protect_breaking_commits = true
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# regex for preprocessing the commit messages
commit_preprocessors = [
  # replace multiple spaces with a single space
  { pattern = '  +', replace = ' ' },
  # remove issue numbers from commits
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = '' },
  # escape <key> to ensure it won't be processed as a <tag>
  { pattern = '(<[^>]+>)$', replace = '`${1}`' },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = '^fix\((test|ci|build)\)', skip = true },
  { message = '^fix\(security\)', group = '<!-- 0 -->🛡️ Security' },
  { message = '^fix.* [Vv]ulnerabilit', group = '<!-- 0 -->🛡️ Security' },
  { message = '^fix.* [Ss]ecur', group = '<!-- 0 -->🛡️ Security' },
  { message = '^fix.* CVE', group = '<!-- 0 -->🛡️ Security' },
  { message = '^feat.*: [Rr]emove', group = '<!-- 1 -->➖ Removed' },
  { message = '^feat.*: [Dd]elete', group = '<!-- 1 -->➖ Removed' },
  { message = '^feat.*: [Dd]rop', group = '<!-- 1 -->➖ Removed' },
  { message = '^feat.*: [Dd]eprecat', group = '<!-- 2 -->❌ Deprecated' },
  { message = '^feat.*: [Aa]dd', group = '<!-- 3 -->🚀 Added' },
  { message = '^feat.*: [Ii]mplement', group = '<!-- 3 -->🚀 Added' },
  { message = '^feat.*: [Ss]upport', group = '<!-- 3 -->🚀 Added' },
  { message = '^feat', group = '<!-- 4 -->🔔 Changed' },
  { message = '^fix', group = '<!-- 5 -->🐛 Fixed' },
  { message = '^perf', group = '<!-- 6 -->⚡ Performance' },
  { message = '^chore(deps)', group = '<!-- 7 -->🌐 Dependencies' },
  { message = '^doc', group = '<!-- 8 -->📚 Documentation' },
  { message = '^chore', skip = true },
  { message = '^refactor', skip = true },
  { message = '^test', skip = true },
  { message = '^ci', skip = true },
  { message = '^build', skip = true },
  { message = '^(Revert|Reapply) "(chore|refactor|test|ci|build):', skip = true },
  { message = '.', group = '<!-- 4 -->🔔 Changed' },
]
