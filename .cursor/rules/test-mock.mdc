---
description: 
globs: *_test.go
alwaysApply: false
---
- When you need to add a mock in a test always try to use 
go.uber.org/mock library and code generation tool `gomock`.

- If you need to create a mock for non-object (e.g. you need to mock a single function like `smtp.SendMail()`) then try to wrap it by an object to make it possible to use `gomock`.

- ALWAYS add command used to generate a mock for a type as `//go:generate` directive for that type. Do not forget to run `go generate ./...` after changing any type with such directive.

Good example:
```go
// Add a type which will wrap function we need to mock.
type SendMailFunc func(addr string, a Auth, from string, to []string, msg []byte) error

func (f SendMailFunc) SendMail(addr string, a Auth, from string, to []string, msg []byte) error {
    return f(addr, a, from, to, msg)
}

// Add an interface and use `mockgen` tool on this interface to create mock for tests.
type MailSender interface {
    SendMail(addr string, a Auth, from string, to []string, msg []byte) error
}

// Make function which needs tests work with interface instead of real function smtp.SendMail().
func easyToTestSentEmail(m MailSender) {
    // ...
}
```