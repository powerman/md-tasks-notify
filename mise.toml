[settings]
experimental = true # Required to use lockfile.
lockfile = true     # DO NOT FORGET TO `touch mise.lock`!


[tools]
go = 'latest'

#--- Codegen
# MockGen generates mock implementations of Go interfaces.
'go:go.uber.org/mock/mockgen' = 'latest'

#--- Test & Lint
# 'go test' runner with output optimized for humans.
'ubi:gotestyourself/gotestsum' = 'latest'
# Fast linters runner for Go.
golangci-lint = 'latest'
# Run your GitHub Actions locally
act = 'latest'

#--- Release
# A highly customizable Changelog Generator that follows Conventional Commit specifications.
git-cliff = 'latest'
# GitHub's official command line tool.
gh = 'latest'


[vars]
cover = '.buildcache/cover.out'


[tasks.'release:version']
description = 'Release now using specific version'
usage = 'arg "<version>" help="Version to set (e.g., 1.2.3 or v1.2.3)"'
run = '''
test -n "$(git status --porcelain)" && { echo "Working directory is dirty"; exit 1; }
git commit --allow-empty -m "bump: v${usage_version#v}" && git push
'''

[tasks.'changelog:skip-commit']
description = 'Add commit hash to .cliffignore to exclude from CHANGELOG'
usage = 'arg "<commit>" help="Git revision (e.g. HEAD or a1b2c4d)"'
run = 'git rev-parse --verify "${usage_commit}" >> .cliffignore'

[tasks.test]
alias = 'default'
description = 'Run all linters and tests'
depends = ['lint:*', 'test:go']

[tasks.'lint:go']
description = 'Lint Go files'
run = 'golangci-lint run'

[tasks.'test:go']
description = 'Run Go tests for a whole project'
wait_for = 'lint:*'                              # Avoid interleaved output with linters.
run = 'gotestsum -- -race -timeout=60s ./...'

[tasks.'cover:go:total']
description = 'Show Go test coverage total'
depends = 'cover:go:generate'
run = 'go tool cover -func={{vars.cover}} | tail -n 1 | xargs echo'

[tasks.'cover:go:browse']
description = 'Show Go test coverage in a browser'
depends = 'cover:go:generate'
run = 'go tool cover -html={{vars.cover}}'

[tasks.'cover:go:generate']
hide = true
depends = 'buildcache'
sources = ['**/*.go']
outputs = ['{{vars.cover}}']
run = '''
gotestsum -- \
    -coverpkg="$(go list ./... | paste -s -d,)" \
    -coverprofile {{vars.cover}} \
    ./...
'''

[tasks.buildcache]
hide = true
run = 'mkdir -p .buildcache'
