// Code generated by MockGen. DO NOT EDIT.
// Source: email.go
//
// Generated by this command:
//
//	mockgen -package=main -source=email.go -destination=mock.email.go
//

// Package main is a generated GoMock package.
package main

import (
	smtp "net/smtp"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSMTPSender is a mock of SMTPSender interface.
type MockSMTPSender struct {
	ctrl     *gomock.Controller
	recorder *MockSMTPSenderMockRecorder
}

// MockSMTPSenderMockRecorder is the mock recorder for MockSMTPSender.
type MockSMTPSenderMockRecorder struct {
	mock *MockSMTPSender
}

// NewMockSMTPSender creates a new mock instance.
func NewMockSMTPSender(ctrl *gomock.Controller) *MockSMTPSender {
	mock := &MockSMTPSender{ctrl: ctrl}
	mock.recorder = &MockSMTPSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSMTPSender) EXPECT() *MockSMTPSenderMockRecorder {
	return m.recorder
}

// SendMail mocks base method.
func (m *MockSMTPSender) SendMail(addr string, a smtp.Auth, from string, to []string, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMail", addr, a, from, to, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMail indicates an expected call of SendMail.
func (mr *MockSMTPSenderMockRecorder) SendMail(addr, a, from, to, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMail", reflect.TypeOf((*MockSMTPSender)(nil).SendMail), addr, a, from, to, msg)
}
